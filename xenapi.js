// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";  window.xsapi = (function() {
    var _connect, _convertJSON, _getReferenceResult, _getResult, _responseHandler, _serializeError, _serializeSession, _serializeUrl, _xmlrpc,
      _this = this;

    function xsapi(username, password, hosturl) {
      this.username = username;
      this.password = password;
      this.hosturl = _serializeUrl(hosturl);
    }

    _connect = function(username, password, hostUrl, callback) {
      return _xmlrpc(hostUrl, "session.login_with_password", [username, password], callback);
    };

    _getResult = function(result, element) {
      return result[0][element];
    };

    _getReferenceResult = function(result, reference, element) {
      return result[reference][element];
    };

    _serializeSession = function(session) {
      return session.replace(/"/g, "");
    };

    _serializeUrl = function(url) {
      return "http://" + url + "/json";
    };

    _serializeError = function(error) {
      var e, str, _i, _len;

      str = "Error: ";
      for (_i = 0, _len = error.length; _i < _len; _i++) {
        e = error[_i];
        str += e + " ";
      }
      return str;
    };

    _convertJSON = function(string) {
      var e;

      try {
        return $.parseJSON(string);
      } catch (_error) {
        e = _error;
        return $.error("Error: Failed to parse returning JSON");
      }
    };

    _responseHandler = function(status, response, callback) {
      var error, messageStatus, ret;

      if (status === "success") {
        messageStatus = _getResult(response, "Status");
        if (messageStatus === "Success") {
          ret = _getResult(response, "Value");
          return callback(null, ret);
        } else {
          error = _serializeError(_getResult(response, "ErrorDescription"));
          return callback(error);
        }
      } else {
        error = "Error: Failed to connect to specified host.";
        return callback(error);
      }
    };

    _xmlrpc = function(url, method, params, callback) {
      if (params == null) {
        params = "[]";
      }
      return $.xmlrpc({
        url: url,
        methodName: method,
        params: params,
        success: function(response, status, jqXHR) {
          return _responseHandler(status, response, callback);
        },
        error: function(jqXHR, status, error) {
          return _responseHandler(status, error, callback);
        }
      });
    };

    xsapi.prototype.getServerCall = function(method, params, callback) {
      var hosturl, local, main;

      if ((this.username != null) && (this.password != null) && (this.hosturl != null)) {
        if (arguments.length === 2) {
          if (Object.prototype.toString.call(params === "[object Function]")) {
            callback = params;
            params = false;
          }
        }
        local = this;
        hosturl = this.hosturl;
        main = function(callback) {
          var session;

          if (params === false) {
            params = [];
          } else {
            params = [params];
          }
          session = _serializeSession(local.session);
          params.unshift(session);
          return _xmlrpc(hosturl, method, params, callback);
        };
        if (this.session != null) {
          return main(callback);
        } else {
          return _connect(this.username, this.password, hosturl, function(err, res) {
            if (err) {
              return callback(err);
            } else {
              local.session = res;
              return main(callback);
            }
          });
        }
      } else {
        return callback("Error: No settings found, make sure you initiate the class first.");
      }
    };

    xsapi.prototype.getServerVersion = function(callback) {
      var local;

      if ((this.username != null) && (this.password != null) && (this.hosturl != null)) {
        local = this;
        return local.getServerCall("pool.get_all_records", function(err, result) {
          var params, poolref;

          if (err) {
            return callback(err);
          } else {
            result = _convertJSON(result);
            poolref = Object.keys(result)[0];
            params = _getReferenceResult(result, poolref, 'master');
            return local.getServerCall("host.get_API_version_major", params, callback);
          }
        });
      } else {
        return callback("Error: No settings found, make sure you initiate the class first.");
      }
    };

    return xsapi;

  }).call(this);

}).call(this);
