// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";  window.XenAPI = function(username, password, hosturl) {
    var calls, element, external, internal, key, _call, _connect, _convertJSON, _getResult, _i, _j, _len, _len1, _ref, _ref1, _responseHandler, _serializeError, _serializeSession, _xmlrpc,
      _this = this;

    internal = {};
    internal._serializeUrl = function(url) {
      return "http://" + url + "/json";
    };
    internal.username = username;
    internal.password = password;
    internal.hosturl = internal._serializeUrl(hosturl);
    calls = {
      VM: ["get_boot_record", "get_all"],
      pool: ["get_all_records"],
      host: ["get_API_version_major"],
      session: ["login_with_password"]
    };
    _connect = function(username, password, hostUrl, callback) {
      return _xmlrpc(hostUrl, "session.login_with_password", [username, password], callback);
    };
    _getResult = function(result, element) {
      return result[0][element];
    };
    _serializeSession = function(session) {
      return session.replace(/"/g, "");
    };
    _serializeError = function(error) {
      var e, str, _i, _len;

      str = "Error: ";
      for (_i = 0, _len = error.length; _i < _len; _i++) {
        e = error[_i];
        str += e + " ";
      }
      return str;
    };
    _convertJSON = function(string) {
      var e;

      try {
        return $.parseJSON(string);
      } catch (_error) {
        e = _error;
        return $.error("Error: Failed to parse returning JSON");
      }
    };
    _responseHandler = function(status, response, callback) {
      var error, messageStatus, ret;

      if (status === "success") {
        messageStatus = _getResult(response, "Status");
        if (messageStatus === "Success") {
          ret = _convertJSON(_getResult(response, "Value"));
          return callback(null, ret);
        } else {
          error = _serializeError(_getResult(response, "ErrorDescription"));
          return callback(error);
        }
      } else {
        error = "Error: Failed to connect to specified host.";
        return callback(error);
      }
    };
    _xmlrpc = function(url, method, parameters, callback) {
      if (parameters == null) {
        parameters = "[]";
      }
      return $.xmlrpc({
        url: url,
        methodName: method,
        params: parameters,
        success: function(response, status, jqXHR) {
          return _responseHandler(status, response, callback);
        },
        error: function(jqXHR, status, error) {
          return _responseHandler(status, error, callback);
        }
      });
    };
    _call = function(method, parameters, callback) {
      var main;

      if ((internal.username != null) && (internal.password != null) && (internal.hosturl != null)) {
        main = function(callback) {
          var session;

          if (parameters === false) {
            parameters = [];
          } else {
            parameters = [parameters];
          }
          session = _serializeSession(internal.session);
          parameters.unshift(session);
          return _xmlrpc(internal.hosturl, method, parameters, callback);
        };
        if (internal.session != null) {
          return main(callback);
        } else {
          return _connect(internal.username, internal.password, internal.hosturl, function(err, res) {
            if (err) {
              return callback(err);
            } else {
              internal.session = res;
              return main(callback);
            }
          });
        }
      } else {
        return callback("Error: No settings found, make sure you initiate the class first.");
      }
    };
    external = {};
    _ref = Object.keys(calls);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      external[key] = {};
      _ref1 = calls[key];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        element = _ref1[_j];
        external[key][element] = (function(key, element) {
          return function(parameters, callback) {
            var method;

            if (arguments.length === 1) {
              if (Object.prototype.toString.call(parameters === "[object Function]")) {
                callback = parameters;
                parameters = false;
              }
            }
            method = key + "." + element;
            return _call(method, parameters, callback);
          };
        })(key, element);
      }
    }
    return external;
  };

}).call(this);

/*
//@ sourceMappingURL=xenapi.map
*/
